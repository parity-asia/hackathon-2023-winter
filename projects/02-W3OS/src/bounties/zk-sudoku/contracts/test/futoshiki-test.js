const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Futoshiki", function () {
  let FutoshikiVerifier, futoshikiVerifier, Futoshiki, futoshiki;

  before(async function () {
    FutoshikiVerifier = await ethers.getContractFactory("FutoshikiVerifier");
    futoshikiVerifier = await FutoshikiVerifier.deploy();
    await futoshikiVerifier.deployed();

    Futoshiki = await ethers.getContractFactory("Futoshiki");
    futoshiki = await Futoshiki.deploy(futoshikiVerifier.address);
    await futoshiki.deployed();
  });

  it("Should generate a board", async function () {
    let board = await futoshiki.generateFutoshikiBoard(new Date().toString());
    expect(board.length).to.equal(2);
  });

  let callDataFutoshiki = [
    [
      "0x0a744eee515a28e6fe4c20801a9e3644b4488c56b64bd95ebaa2bd12718dda0b",
      "0x0711d52c836be447e27c25603a3da8f06c7fde28b0502975df97695378b3aa1d",
    ],
    [
      [
        "0x0fc8a4e03ac85a47603bed7bd57fbd8ec81326750d5b85fe576e121049adf7be",
        "0x26d528ca73ecc2c0acd72886afe1ecec77d29fdb65a761c7b6f859de30e80a19",
      ],
      [
        "0x26143cbb61c77825a607e007b44c1750f7de62395c2cc630bbe8667004a479e5",
        "0x10e4a234614ae8c01f8da7e01d9474f09749950bd57f29264e5ede83b801eafa",
      ],
    ],
    [
      "0x0d75193ba02c858e377e7f7ece5af070fe344f4cea2dce63983cc6d03b91077c",
      "0x03d71ba1a200e00fdfdcd5fca9c4cf70aea5cb1fffd1509346bd5faf8658c3cb",
    ],
    [
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000003",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
    ],
  ];

  it("Should verify the proof", async function () {
    // Call the function.
    let result = await futoshikiVerifier.verifyProof(
      callDataFutoshiki[0],
      callDataFutoshiki[1],
      callDataFutoshiki[2],
      callDataFutoshiki[3]
    );
    expect(result).to.equal(true);
  });

  it("Should verify the proof and mint an NFT", async function () {
    // Call the function.
    let txn = await futoshiki.verifyFutoshikiAndMintNft(
      callDataFutoshiki[0],
      callDataFutoshiki[1],
      callDataFutoshiki[2],
      callDataFutoshiki[3]
    );
    // Wait for it to be mined.
    await txn.wait();
  });
});
