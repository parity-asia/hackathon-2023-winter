const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Skyscrapers", function () {
  let SkyscrapersVerifier, skyscrapersVerifier, Skyscrapers, skyscrapers;

  before(async function () {
    SkyscrapersVerifier = await ethers.getContractFactory(
      "SkyscrapersVerifier"
    );
    skyscrapersVerifier = await SkyscrapersVerifier.deploy();
    await skyscrapersVerifier.deployed();

    Skyscrapers = await ethers.getContractFactory("Skyscrapers");
    skyscrapers = await Skyscrapers.deploy(skyscrapersVerifier.address);
    await skyscrapers.deployed();
  });

  it("Should generate a board", async function () {
    let board = await skyscrapers.generateSkyscrapersBoard(
      new Date().toString()
    );
    expect(board.length).to.equal(2);
  });

  let callDataSkyscrapers = [
    [
      "0x2709123fa0fc94b4c0501e602abbaaa52dc06af07d24606c1600abc858da6fc8",
      "0x23fbf163db25948581379dbc52f7983f9783b2f432593c5e27746afdfffbc45b",
    ],
    [
      [
        "0x1b36c1ebddfa934dd315ffea16d77768260f9f5f8ae22e2941d65f8f73b52785",
        "0x180ce4af6d0c5f353f92b130b443810173e91380aa11ad189a0b68670c4cbeb3",
      ],
      [
        "0x1c7b96886431739c67626def084b84ff3a4ed21e09a89ccf76ca3574ccdd01ce",
        "0x22457a40880665b32cdf127f4ec7c7f2996af7c1019981b7989dcd90da68421d",
      ],
    ],
    [
      "0x11250564e384e42f78651420265eeca550e6b9a862399e7d221ddc5300caee07",
      "0x2a1186f5a86e276b0066e91598fbced68ac70ce777adc6367751feba39c3ec58",
    ],
    [
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000004",
      "0x0000000000000000000000000000000000000000000000000000000000000004",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000005",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000002",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000002",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
    ],
  ];

  it("Should verify the proof", async function () {
    // Call the function.
    let result = await skyscrapersVerifier.verifyProof(
      callDataSkyscrapers[0],
      callDataSkyscrapers[1],
      callDataSkyscrapers[2],
      callDataSkyscrapers[3]
    );
    expect(result).to.equal(true);
  });

  it("Should verify the proof and mint an NFT", async function () {
    // Call the function.
    let txn = await skyscrapers.verifySkyscrapersAndMintNft(
      callDataSkyscrapers[0],
      callDataSkyscrapers[1],
      callDataSkyscrapers[2],
      callDataSkyscrapers[3]
    );
    // Wait for it to be mined.
    await txn.wait();
  });
});
