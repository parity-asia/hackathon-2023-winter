const main = async () => {
  // --------- Sudoku ---------------------

  const contractFactorySudokuVerifier = await hre.ethers.getContractFactory(
    "SudokuVerifier"
  );
  const contractSudokuVerifier = await contractFactorySudokuVerifier.deploy();
  await contractSudokuVerifier.deployed();
  console.log(
    "SudokuVerifier Contract deployed to:",
    contractSudokuVerifier.address
  );

  const contractFactorySudoku = await hre.ethers.getContractFactory("Sudoku");
  const contractSudoku = await contractFactorySudoku.deploy(
    contractSudokuVerifier.address
  );
  await contractSudoku.deployed();
  console.log("Sudoku Contract deployed to:", contractSudoku.address);

  let board = await contractSudoku.generateSudokuBoard(new Date().toString());
  console.log(board);

  let callDataSudoku = [
    [
      "0x060c58df1d210c6bd8ae6807bf30ee43b288fc0dbf4ef871999374e115369d48",
      "0x04a881a4cd64391f10334351da9886aea43f11f4d10f2298bcdab2eab7019f44",
    ],
    [
      [
        "0x0b8e2823a2880264d7cd38ef336c8db28363197335c1e1b66fca47b2b3faf9af",
        "0x011690cf57d45e31c11d6793852ae7a266247b4185fe7a4f61f368d110bec8fe",
      ],
      [
        "0x00b43c733d029caf6aa7999dfd133c9d3360548de0ad4d699df8afe60cb11c25",
        "0x06e512a45be566376fa82e4ca1c3d69b7f053fd88407b2257c8a3c3c556d8f6a",
      ],
    ],
    [
      "0x2b49d8956e717704a0cbc774d795ea5eb9593f1604ce75645e8b70d6173f43ca",
      "0x0878d73d3cff739918a54cf4d5bccbd1b04368dc25450420f0c957b37d46f5ca",
    ],
    [
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000006",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000007",
      "0x0000000000000000000000000000000000000000000000000000000000000002",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000008",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000009",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000006",
      "0x0000000000000000000000000000000000000000000000000000000000000008",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000003",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000007",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000002",
      "0x0000000000000000000000000000000000000000000000000000000000000009",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000004",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000005",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000007",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000006",
      "0x0000000000000000000000000000000000000000000000000000000000000005",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000008",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000005",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000003",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000007",
      "0x0000000000000000000000000000000000000000000000000000000000000009",
      "0x0000000000000000000000000000000000000000000000000000000000000002",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000004",
    ],
  ];

  // Call the function.
  let result = await contractSudokuVerifier.verifyProof(
    callDataSudoku[0],
    callDataSudoku[1],
    callDataSudoku[2],
    callDataSudoku[3]
  );

  console.log("Result", result);

  // Call the function.
  let txn = await contractSudoku.verifySudokuAndMintNft(
    callDataSudoku[0],
    callDataSudoku[1],
    callDataSudoku[2],
    callDataSudoku[3]
  );
  // Wait for it to be mined.
  await txn.wait();
  console.log("Minted Sudoku NFT #1");

  // --------- Futoshiki ---------------------

  const contractFactoryFutoshikiVerifier = await hre.ethers.getContractFactory(
    "FutoshikiVerifier"
  );
  const contractFutoshikiVerifier =
    await contractFactoryFutoshikiVerifier.deploy();
  await contractFutoshikiVerifier.deployed();
  console.log(
    "FutoshikiVerifier Contract deployed to:",
    contractFutoshikiVerifier.address
  );

  const contractFactoryFutoshiki = await hre.ethers.getContractFactory(
    "Futoshiki"
  );
  const contractFutoshiki = await contractFactoryFutoshiki.deploy(
    contractFutoshikiVerifier.address
  );
  await contractFutoshiki.deployed();
  console.log("Futoshiki Contract deployed to:", contractFutoshiki.address);

  let boardFutoshiki = await contractFutoshiki.generateFutoshikiBoard(
    new Date().toString()
  );
  console.log(boardFutoshiki[0]);

  let callDataFutoshiki = [
    [
      "0x0a744eee515a28e6fe4c20801a9e3644b4488c56b64bd95ebaa2bd12718dda0b",
      "0x0711d52c836be447e27c25603a3da8f06c7fde28b0502975df97695378b3aa1d",
    ],
    [
      [
        "0x0fc8a4e03ac85a47603bed7bd57fbd8ec81326750d5b85fe576e121049adf7be",
        "0x26d528ca73ecc2c0acd72886afe1ecec77d29fdb65a761c7b6f859de30e80a19",
      ],
      [
        "0x26143cbb61c77825a607e007b44c1750f7de62395c2cc630bbe8667004a479e5",
        "0x10e4a234614ae8c01f8da7e01d9474f09749950bd57f29264e5ede83b801eafa",
      ],
    ],
    [
      "0x0d75193ba02c858e377e7f7ece5af070fe344f4cea2dce63983cc6d03b91077c",
      "0x03d71ba1a200e00fdfdcd5fca9c4cf70aea5cb1fffd1509346bd5faf8658c3cb",
    ],
    [
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000003",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
    ],
  ];

  // Call the function.
  let resultFutoshiki = await contractFutoshikiVerifier.verifyProof(
    callDataFutoshiki[0],
    callDataFutoshiki[1],
    callDataFutoshiki[2],
    callDataFutoshiki[3]
  );

  console.log("resultFutoshiki", resultFutoshiki);

  // Call the function.
  let txn1 = await contractFutoshiki.verifyFutoshikiAndMintNft(
    callDataFutoshiki[0],
    callDataFutoshiki[1],
    callDataFutoshiki[2],
    callDataFutoshiki[3]
  );
  // Wait for it to be mined.
  await txn1.wait();
  console.log("Minted Futoshiki NFT #1");

  // --------- Skyscrapers ---------------------

  const contractFactorySkyscrapersVerifier =
    await hre.ethers.getContractFactory("SkyscrapersVerifier");
  const contractSkyscrapersVerifier =
    await contractFactorySkyscrapersVerifier.deploy();
  await contractSkyscrapersVerifier.deployed();
  console.log(
    "SkyscrapersVerifier Contract deployed to:",
    contractSkyscrapersVerifier.address
  );

  const contractFactorySkyscrapers = await hre.ethers.getContractFactory(
    "Skyscrapers"
  );
  const contractSkyscrapers = await contractFactorySkyscrapers.deploy(
    contractSkyscrapersVerifier.address
  );
  await contractSkyscrapers.deployed();
  console.log("Skyscrapers Contract deployed to:", contractSkyscrapers.address);

  let boardSkyscrapers = await contractSkyscrapers.generateSkyscrapersBoard(
    new Date().toString()
  );
  console.log(boardSkyscrapers[0]);

  let callDataSkyscrapers = [
    [
      "0x2709123fa0fc94b4c0501e602abbaaa52dc06af07d24606c1600abc858da6fc8",
      "0x23fbf163db25948581379dbc52f7983f9783b2f432593c5e27746afdfffbc45b",
    ],
    [
      [
        "0x1b36c1ebddfa934dd315ffea16d77768260f9f5f8ae22e2941d65f8f73b52785",
        "0x180ce4af6d0c5f353f92b130b443810173e91380aa11ad189a0b68670c4cbeb3",
      ],
      [
        "0x1c7b96886431739c67626def084b84ff3a4ed21e09a89ccf76ca3574ccdd01ce",
        "0x22457a40880665b32cdf127f4ec7c7f2996af7c1019981b7989dcd90da68421d",
      ],
    ],
    [
      "0x11250564e384e42f78651420265eeca550e6b9a862399e7d221ddc5300caee07",
      "0x2a1186f5a86e276b0066e91598fbced68ac70ce777adc6367751feba39c3ec58",
    ],
    [
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000004",
      "0x0000000000000000000000000000000000000000000000000000000000000004",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000005",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000002",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000002",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000001",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
      "0x0000000000000000000000000000000000000000000000000000000000000000",
    ],
  ];

  // Call the function.
  let resultSkyscrapers = await contractSkyscrapersVerifier.verifyProof(
    callDataSkyscrapers[0],
    callDataSkyscrapers[1],
    callDataSkyscrapers[2],
    callDataSkyscrapers[3]
  );

  console.log("resultSkyscrapers", resultSkyscrapers);

  // Call the function.
  let txn2 = await contractSkyscrapers.verifySkyscrapersAndMintNft(
    callDataSkyscrapers[0],
    callDataSkyscrapers[1],
    callDataSkyscrapers[2],
    callDataSkyscrapers[3]
  );
  // Wait for it to be mined.
  await txn2.wait();
  console.log("Minted Skyscrapers NFT #1");
};

const runMain = async () => {
  try {
    await main();
    process.exit(0);
  } catch (error) {
    console.log(error);
    process.exit(1);
  }
};

runMain();
