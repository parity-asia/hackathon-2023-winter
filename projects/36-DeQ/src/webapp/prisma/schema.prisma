// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int        @id @default(autoincrement())
  name          String?
  handle        String?    @unique
  address       String?    @unique
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  createdAt     DateTime   @default(now()) @map("created_at")

  questions     Question[]
  answers       Answer[]
  holdings      Holder[]
  deposits      QuestionDeposits[]
  trades        TradeLog[]
  Account       Account[]
  Session       Session[]

  @@map("users")
}

model Question {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  title         String
  body          String
  totalDeposit  BigInt   @default(0) @map("total_deposit")
  createdAt     DateTime @default(now()) @map("created_at")

  user          User     @relation(fields: [userId], references: [id])
  answers       Answer[]
  deposits      QuestionDeposits[]

  @@map("questions")
}

model QuestionDeposits {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  questionId Int      @map("question_id")
  amount     BigInt
  createdAt  DateTime @default(now()) @map("created_at")

  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@map("question_deposits")
}

model Answer {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  questionId      Int      @map("question_id")
  tokenId         Int      @unique @map("token_id")
  body            String
  shares          BigInt   @default(0)
  values          BigInt   @default(0)
  pricePerShare   BigInt   @default(0) @map("price_per_share")
  createdAt       DateTime @default(now()) @map("created_at")

  user     User       @relation(fields: [userId], references: [id])
  question Question   @relation(fields: [questionId], references: [id])
  trades   TradeLog[]
  holders  Holder[]

  picked Boolean @default(false)

  @@map("answers")
}

model Holder {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tokenId   Int      @map("token_id")
  shares    BigInt
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id])
  answer  Answer  @relation(fields: [tokenId], references: [tokenId])

  @@map("holders")
  @@unique([userId, tokenId])
}

enum TradeType {
  CREATED
  BOUGHT
  SOLD
}

model TradeLog {
  id         Int      @id @default(autoincrement())
  userId     Int?     @map("user_id")
  tokenId    Int      @map("token_id")
  type       TradeType
  blockHash  String   @map("block_hash")
  address    String
  amount     BigInt
  tokens     BigInt
  creatorFee BigInt   @map("creator_fee")
  createdAt  DateTime @default(now()) @map("created_at")

  user   User?  @relation(fields: [userId], references: [id])
  answer Answer @relation(fields: [tokenId], references: [tokenId])

  @@map("trade_logs")
}
