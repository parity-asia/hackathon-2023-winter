/**
 * A limited list of rpc methods that are supported by an RPC provider. Used for testing.
 * Such a list is supposed to be generated by a custom configuration with `typegen`.
 */
export const LimitedRpcList = {
  author: [
    'hasKey',
    'hasSessionKeys',
    'insertKey',
    'pendingExtrinsics',
    'removeExtrinsic',
    'rotateKeys',
    'submitAndWatchExtrinsic',
    'submitExtrinsic',
  ],
  babe: ['epochAuthorship'],
  beefy: ['getFinalizedHead', 'subscribeJustifications'],
  chain: [
    'getBlock',
    'getBlockHash',
    'getFinalizedHead',
    'getHeader',
    'subscribeAllHeads',
    'subscribeFinalizedHeads',
    'subscribeNewHeads',
  ],
  childstate: ['getKeys', 'getKeysPaged', 'getStorage', 'getStorageEntries', 'getStorageHash', 'getStorageSize'],
  contracts: ['call', 'getStorage', 'instantiate', 'rentProjection', 'uploadCode'],
  dev: ['getBlockStats'],
  engine: ['createBlock', 'finalizeBlock'],
  eth: [
    'accounts',
    'blockNumber',
    'call',
    'chainId',
    'coinbase',
    'estimateGas',
    'feeHistory',
    'gasPrice',
    'getBalance',
    'getBlockByHash',
    'getBlockByNumber',
    'getBlockTransactionCountByHash',
    'getBlockTransactionCountByNumber',
    'getCode',
    'getFilterChanges',
    'getFilterLogs',
    'getLogs',
    'getProof',
    'getStorageAt',
    'getTransactionByBlockHashAndIndex',
    'getTransactionByBlockNumberAndIndex',
    'getTransactionByHash',
    'getTransactionCount',
    'getTransactionReceipt',
    'getUncleByBlockHashAndIndex',
    'getUncleByBlockNumberAndIndex',
    'getUncleCountByBlockHash',
    'getUncleCountByBlockNumber',
    'getWork',
    'hashrate',
    'maxPriorityFeePerGas',
    'mining',
    'newBlockFilter',
    'newFilter',
    'newPendingTransactionFilter',
    'protocolVersion',
    'sendRawTransaction',
    'sendTransaction',
    'submitHashrate',
    'submitWork',
    'subscribe',
    'syncing',
    'uninstallFilter',
  ],
  grandpa: ['proveFinality', 'roundState', 'subscribeJustifications'],
  mmr: ['generateProof', 'root', 'verifyProof', 'verifyProofStateless'],
  net: ['listening', 'peerCount', 'version'],
  offchain: ['localStorageGet', 'localStorageSet'],
  payment: ['queryFeeDetails', 'queryInfo'],
  rpc: ['methods'],
  state: [
    'call',
    'getChildKeys',
    'getChildReadProof',
    'getChildStorage',
    'getChildStorageHash',
    'getChildStorageSize',
    'getKeys',
    'getKeysPaged',
    'getMetadata',
    'getPairs',
    'getReadProof',
    'getRuntimeVersion',
    'getStorage',
    'getStorageHash',
    'getStorageSize',
    'queryStorage',
    'queryStorageAt',
    'subscribeRuntimeVersion',
    'subscribeStorage',
    'traceBlock',
    'trieMigrationStatus',
  ],
  syncstate: ['genSyncSpec'],
  system: [
    'accountNextIndex',
    'addLogFilter',
    'addReservedPeer',
    'chain',
    'chainType',
    'dryRun',
    'health',
    'localListenAddresses',
    'localPeerId',
    'name',
    'networkState',
    'nodeRoles',
    'peers',
    'properties',
    'removeReservedPeer',
    'reservedPeers',
    'resetLogFilter',
    'syncState',
    'version',
  ],
  web3: ['clientVersion', 'sha3'],
} as const;
